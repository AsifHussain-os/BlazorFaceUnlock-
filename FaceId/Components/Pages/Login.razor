@page "/login"
@using FaceId.Services
@inject AuthService Auth
@inject NavigationManager Nav

<div class="container">
    @if (isCheckingBiometrics)
    {
        <span style="text-align:center; color:#666;">Authenticating...</span>
    }
    else
    {
        <h3 style="text-align:center; color:#333; margin-bottom: 25px;">Login</h3>

        @if (!string.IsNullOrEmpty(loginMessage))
        {
            <span style="color:red; text-align:center; margin-bottom: 20px;">@loginMessage</span>
        }

        <hr style="margin-bottom: 30px;" />

        <div style="margin-bottom: 20px;">
            <label style="font-weight: 600; color:#555;">PIN</label><br />
            <input @bind="pin" maxlength="6" style="width: 100%; padding: 10px; margin-top: 6px; border: 1px solid #ccc; border-radius: 5px; font-size: 16px;" />
            <button @onclick="LoginWithPin" style="width: 100%; margin-top: 10px; padding: 12px; background-color: #3498db; color: white; border: none; border-radius: 6px; font-size: 16px; cursor: pointer;">
                Login with PIN
            </button>
        </div>

        <div style="margin-bottom: 25px;">
            <label style="font-weight: 600; color:#555;">Password</label><br />
            <input type="password" @bind="password" style="width: 100%; padding: 10px; margin-top: 6px; border: 1px solid #ccc; border-radius: 5px; font-size: 16px;" />
            <button @onclick="LoginWithPassword" style="width: 100%; margin-top: 10px; padding: 12px; background-color: #2ecc71; color: white; border: none; border-radius: 6px; font-size: 16px; cursor: pointer;">
                Login with Password
            </button>
        </div>
    }
</div>

@code {
    private bool isCheckingBiometrics = false;
    private string pin = "";
    private string password = "";
    private string loginMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Auto check at first load
        await CheckBiometricsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // If coming back from resume, try again
        if (!firstRender && AppState.ShouldPromptBiometric)
        {
            AppState.ShouldPromptBiometric = false;
            await CheckBiometricsAsync();
        }
    }

    private async Task CheckBiometricsAsync()
    {
        var biometricEnabled = await Auth.IsBiometricsEnabledAsync();
        if (biometricEnabled)
        {
            await TryAutoBiometricLogin();
        }
    }

    private async Task TryAutoBiometricLogin()
    {
        isCheckingBiometrics = true;
        StateHasChanged();

        // This will prompt fingerprint or face automatically depending on device
        var success = await Auth.TryBiometricUnlockAsync();

        isCheckingBiometrics = false;

        if (success)
        {
            Nav.NavigateTo("/?authenticated=true");
        }
        else
        {
            loginMessage = "Authentication failed or cancelled.";
            StateHasChanged();
        }
    }

    private async Task LoginWithPin()
    {
        if (await Auth.ValidatePinAsync(pin))
            Nav.NavigateTo("/?authenticated=true");
        else
            loginMessage = "Incorrect PIN.";
    }

    private async Task LoginWithPassword()
    {
        if (await Auth.ValidatePasswordAsync(password))
            Nav.NavigateTo("/?authenticated=true");
        else
            loginMessage = "Incorrect password.";
    }
}
